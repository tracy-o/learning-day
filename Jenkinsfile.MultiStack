#!/usr/bin/env groovy

library 'BBCNews'

String buildVariables() {
  def envFile = readFile 'build.env'
  def envVars = ''
  envFile.split('\n').each { env ->
    envVars = "$envVars -e $env"
  }
  envVars
}

node {
  cleanWs()
  checkout scm

  properties([
    buildDiscarder(logRotator(daysToKeepStr: '7', artifactDaysToKeepStr: '7')),
    parameters([
        choice(choices: ['belfrage', 'belfrage-preview', 'cedric-belfrage', 'bruce-belfrage'], description: 'The Cosmos Service to create a release for', name: 'SERVICE'),
        booleanParam(defaultValue: false, description: 'Force release from non-master branch', name: 'FORCE_RELEASE')
    ])
  ])

  try {
    stage('Build RPM') {
      sh "cp cosmos_config/${params.SERVICE}.json cosmos/release-configuration.json"
      sh 'mkdir -p SOURCES'
      String vars = buildVariables()
      docker.image('qixxit/elixir-centos').inside("-u root -e MIX_ENV=prod ${vars}") {
        sh 'mix deps.get'
        sh 'mix distillery.release'
      }
      sh 'cp _build/prod/rel/belfrage/releases/*/belfrage.tar.gz SOURCES/'
    }

    BBCNews.archiveDirectoryAsPackageSource('bake-scripts', 'bake-scripts.tar.gz')
    String version

    stage('Get release version') {
      Boolean addShaToVersion=true
      version = BBCNews.getNextPackageVersionFromCosmos(params.SERVICE, params.FORCE_RELEASE, env.BRANCH_NAME, false, addShaToVersion)
    }

    BBCNews.buildRPMWithMockAndVersion(params.SERVICE, 'belfrage.spec', version)
    BBCNews.setRepositories(params.SERVICE, 'repositories.json')
    BBCNews.cosmosRelease(params.SERVICE, 'RPMS/*.x86_64.rpm', params.FORCE_RELEASE)
    BBCNews.deployReleaseVersion(params.SERVICE, version, params.FORCE_RELEASE)

  } catch(err) {
    if (env.BRANCH_NAME == "master") {
      stage("Report result to slack") {
        slackSend channel: "#team-belfrage", message: ":fire: Release failed for *${params.SERVICE}* <${env.RUN_DISPLAY_URL}|more info>"
      }
    }
    currentBuild.result = 'FAILURE'
  }

  stage("clean up after ourselves") {
    docker.image('qixxit/elixir-centos').inside("-u root") {
      sh "rm -rf ${env.WORKSPACE}/{deps,_build,local.log}"
    }
    cleanWs()
    dir("${env.WORKSPACE}@libs") {
      deleteDir()
    }
  }
}
